// app/src/main/java/com/example/slowclock/ui/main/MainScreen.kt
package com.example.slowclock.ui.main

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.slowclock.ui.common.components.ErrorCard
import com.example.slowclock.ui.common.dialog.DeleteConfirmDialog
import com.example.slowclock.ui.main.components.CurrentTaskSection
import com.example.slowclock.ui.main.components.EmptyStateCard
import com.example.slowclock.ui.main.components.ScheduleDetailDialog
import com.example.slowclock.ui.main.components.TodayScheduleSection
import com.example.slowclock.ui.main.components.TodaySummaryCard
import com.example.slowclock.ui.main.components.SharedRemindersSection
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.platform.LocalContext
import com.google.firebase.auth.FirebaseAuth

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(
    viewModel: MainViewModel = viewModel(),
    shouldRefresh: Boolean = false,
    onAddSchedule: () -> Unit = {},
    onEditSchedule: (String) -> Unit = {},
    onNavigateToProfile: () -> Unit = {},
    onNavigateToSettings: () -> Unit = {},
    onRefreshHandled: () -> Unit = {}
) {
    val uiState by viewModel.uiState.collectAsState()
    val dateFormat = SimpleDateFormat("yyyyÎÖÑ MÏõî dÏùº EEEE", Locale.KOREAN)
    val timeFormat = remember { java.text.SimpleDateFormat("HH:mm", java.util.Locale.getDefault()) }

    val context = LocalContext.current
    var lastShareCode by remember { mutableStateOf("") }
    val prefs = remember { context.getSharedPreferences("settings", android.content.Context.MODE_PRIVATE) }
    val shareCode = prefs.getString("share_code", null)
    val currentUserUid = FirebaseAuth.getInstance().currentUser?.uid

    // ÏùºÏ†ï Ï∂îÍ∞Ä ÌõÑ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
    LaunchedEffect(shouldRefresh) {
        if (shouldRefresh) {
            viewModel.loadTodaySchedules()
            val shareCode = prefs.getString("share_code", null)
            if (!shareCode.isNullOrBlank()) {
                viewModel.observeSharedReminders(shareCode)
            }
            onRefreshHandled()
        }
    }

    // ÏÑ∏Î∂ÄÏ†ïÎ≥¥ Îã§Ïù¥ÏñºÎ°úÍ∑∏
    uiState.selectedScheduleForDetail?.let { schedule ->
        ScheduleDetailDialog(
            schedule = schedule,
            onDismiss = { viewModel.hideScheduleDetail() },
            onEdit = {
                viewModel.hideScheduleDetail()
                onEditSchedule(schedule.id) // Ìé∏Ïßë ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
            },
            onDelete = {
                viewModel.hideScheduleDetail()
                viewModel.showDeleteConfirmDialog(schedule.id)
            }
        )
    }


    // ÏÇ≠Ï†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ (Ïù¥Í≤ÉÎèÑ ÌïÑÏöîÌï®)
    if (uiState.showDeleteConfirmDialog && uiState.scheduleToDelete != null) {
        DeleteConfirmDialog(
            schedule = uiState.scheduleToDelete!!,
            onConfirm = {
                viewModel.deleteSchedule(uiState.scheduleToDelete!!.id)
            },
            onDismiss = { viewModel.hideDeleteConfirmDialog() }
        )
    }

    LaunchedEffect(shareCode) {
        if (!shareCode.isNullOrBlank() && shareCode != lastShareCode) {
            lastShareCode = shareCode
            viewModel.observeSharedReminders(shareCode)
        }
    }

    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "ÎäêÎ¶∞ÏãúÍ≥Ñ",
                            style = MaterialTheme.typography.headlineLarge, // fontSize ÎåÄÏã† style ÏÇ¨Ïö©
                            color = MaterialTheme.colorScheme.primary // ÌïòÎìúÏΩîÎî© ÏÉâÏÉÅ Ï†úÍ±∞
                        )
                        Text(
                            text = dateFormat.format(Date()),
                            style = MaterialTheme.typography.bodyLarge, // fontSize ÎåÄÏã† style ÏÇ¨Ïö©
                            color = MaterialTheme.colorScheme.onSurfaceVariant // ÌïòÎìúÏΩîÎî© ÏÉâÏÉÅ Ï†úÍ±∞
                        )
                    }
                },
                actions = {
                    // ÌîÑÎ°úÌïÑ Î≤ÑÌäº (Îçî ÌÅ¨Í≤å)
                    IconButton(
                        onClick = onNavigateToProfile,
                        modifier = Modifier.size(56.dp) // 48dp ‚Üí 56dp
                    ) {
                        Icon(
                            Icons.Default.Person,
                            contentDescription = "ÎÇ¥ Ï†ïÎ≥¥",
                            tint = MaterialTheme.colorScheme.primary, // ÌïòÎìúÏΩîÎî© ÏÉâÏÉÅ Ï†úÍ±∞
                            modifier = Modifier.size(32.dp) // 28dp ‚Üí 32dp
                        )
                    }
                    // ÏÑ§Ï†ï(share code) Î≤ÑÌäº
                    IconButton(
                        onClick = onNavigateToSettings,
                        modifier = Modifier.size(56.dp)
                    ) {
                        Icon(
                            Icons.Default.Settings,
                            contentDescription = "ÏÑ§Ï†ï",
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(32.dp)
                        )
                    }
                },
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface // ÌïòÎìúÏΩîÎî© ÏÉâÏÉÅ Ï†úÍ±∞
                )
            )
        },
        floatingActionButton = {
            FloatingActionButton(
                onClick = onAddSchedule,
                containerColor = MaterialTheme.colorScheme.primary, // ÌïòÎìúÏΩîÎî© ÏÉâÏÉÅ Ï†úÍ±∞
                modifier = Modifier.size(72.dp) // 64dp ‚Üí 72dp
            ) {
                Icon(
                    Icons.Default.Add,
                    contentDescription = "ÏùºÏ†ï Ï∂îÍ∞Ä",
                    tint = MaterialTheme.colorScheme.onPrimary, // ÌïòÎìúÏΩîÎî© ÏÉâÏÉÅ Ï†úÍ±∞
                    modifier = Modifier.size(36.dp) // 32dp ‚Üí 36dp
                )
            }
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .background(MaterialTheme.colorScheme.background), // ÌïòÎìúÏΩîÎî© ÏÉâÏÉÅ Ï†úÍ±∞
            contentPadding = PaddingValues(horizontal = 20.dp, vertical = 24.dp), // Îçî ÌÅ∞ Ìå®Îî©
            verticalArrangement = Arrangement.spacedBy(24.dp) // Îçî ÌÅ∞ Í∞ÑÍ≤©
        ) {

            // üìä Ïò§Îäò ÏùºÏ†ï ÏöîÏïΩ
            item {
                TodaySummaryCard(
                    totalCount = uiState.totalCount,
                    completedCount = uiState.completedCount
                )
            }

            // üü° ÏßÄÍ∏à Ìï† Ïùº
            uiState.currentSchedule?.let { schedule ->
                item {
                    CurrentTaskSection(
                        schedule = schedule,
                        onShowDetail = { viewModel.showScheduleDetail(schedule.id) }
                    )
                }
            }

            // üìã Ïò§ÎäòÏùò ÏùºÏ†ï
            item {
                TodayScheduleSection(
                    schedules = uiState.todaySchedules,
                    onToggleComplete = viewModel::toggleScheduleComplete,
                    onShowDetail = viewModel::showScheduleDetail,
                )
            }

            // Shared Reminders Section
            if (uiState.sharedReminders.isNotEmpty()) {
                item {
                    SharedRemindersSection(
                        sharedReminders = uiState.sharedReminders,
                        currentUserUid = currentUserUid,
                        timeFormat = timeFormat,
                        onToggleComplete = viewModel::toggleSharedReminderComplete
                    )
                }
            }

            // Îπà ÏÉÅÌÉú Ï≤òÎ¶¨
            if (uiState.todaySchedules.isEmpty() && !uiState.isLoading) {
                item {
                    EmptyStateCard()
                }
            }

            // ÏóêÎü¨ Î©îÏãúÏßÄ
            if (uiState.error != null) {
                item {
                    ErrorCard(
                        error = uiState.error!!,
                        canRetry = uiState.canRetry,
                        onRetry = { viewModel.retryLastAction() },
                        onDismiss = { viewModel.clearError() }
                    )
                }
            }
        }
    }
}