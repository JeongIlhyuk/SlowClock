// ui/main/MainScreen.kt
package com.example.slowclock.ui.main

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.slowclock.ui.main.components.CurrentTaskSection
import com.example.slowclock.ui.main.components.ScheduleDetailDialog
import com.example.slowclock.ui.main.components.TodayScheduleSection
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(
    viewModel: MainViewModel = viewModel(),
    shouldRefresh: Boolean = false,
    onAddSchedule: () -> Unit = {},
    onNavigateToProfile: () -> Unit = {},
    onRefreshHandled: () -> Unit = {}
) {
    val uiState by viewModel.uiState.collectAsState()
    val dateFormat = SimpleDateFormat("yyyyÎÖÑ MÏõî dÏùº EEEE", Locale.KOREAN)

    // ÏùºÏ†ï Ï∂îÍ∞Ä ÌõÑ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
    LaunchedEffect(shouldRefresh) {
        if (shouldRefresh) {
            viewModel.loadTodaySchedules()
            onRefreshHandled()
        }
    }

    // ÏÑ∏Î∂ÄÏ†ïÎ≥¥ Îã§Ïù¥ÏñºÎ°úÍ∑∏
    uiState.selectedScheduleForDetail?.let { schedule ->
        ScheduleDetailDialog(
            schedule = schedule,
            onDismiss = { viewModel.hideScheduleDetail() },
        )
    }

    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "ÎäêÎ¶∞ÏãúÍ≥Ñ",
                            fontSize = 28.sp, // Îçî ÌÅ¨Í≤å
                            fontWeight = FontWeight.Bold,
                            color = Color(0xFF2196F3)
                        )
                        Text(
                            text = dateFormat.format(Date()),
                            fontSize = 16.sp, // Îçî ÌÅ¨Í≤å
                            color = Color(0xFF424242),
                            fontWeight = FontWeight.Medium
                        )
                    }
                },
                actions = {

                    // ÌîÑÎ°úÌïÑ Î≤ÑÌäº (Îçî ÌÅ¨Í≤å)
                    IconButton(
                        onClick = onNavigateToProfile,
                        modifier = Modifier.size(48.dp) // Îçî ÌÅ¨Í≤å
                    ) {
                        Icon(
                            Icons.Default.Person,
                            contentDescription = "ÎÇ¥ Ï†ïÎ≥¥",
                            tint = Color(0xFF2196F3),
                            modifier = Modifier.size(28.dp) // ÏïÑÏù¥ÏΩòÎèÑ ÌÅ¨Í≤å
                        )
                    }
                    // ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº (Îçî ÌÅ¨Í≤å)
                    IconButton(
                        onClick = { viewModel.loadTodaySchedules() },
                        modifier = Modifier.size(48.dp)
                    ) {

                        if (uiState.isLoading) {
                            CircularProgressIndicator(
                                modifier = Modifier.size(24.dp),
                                color = Color(0xFF2196F3),
                                strokeWidth = 3.dp
                            )
                        } else {
                            Icon(
                                Icons.Default.Refresh,
                                contentDescription = "ÏÉàÎ°úÍ≥†Ïπ®",
                                tint = Color(0xFF2196F3),
                                modifier = Modifier.size(28.dp)
                            )
                        }
                    }
                },
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = Color.White
                )
            )
        },
        floatingActionButton = {
            FloatingActionButton(
                onClick = onAddSchedule,
                containerColor = Color(0xFF2196F3),
                modifier = Modifier.size(64.dp) // Îçî ÌÅ¨Í≤å
            ) {
                Icon(
                    Icons.Default.Add,
                    contentDescription = "ÏùºÏ†ï Ï∂îÍ∞Ä",
                    tint = Color.White,
                    modifier = Modifier.size(32.dp) // ÏïÑÏù¥ÏΩòÎèÑ ÌÅ¨Í≤å
                )
            }
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .background(Color(0xFFF5F5F5)),
            contentPadding = PaddingValues(horizontal = 20.dp, vertical = 24.dp), // Îçî ÌÅ∞ Ìå®Îî©
            verticalArrangement = Arrangement.spacedBy(24.dp) // Îçî ÌÅ∞ Í∞ÑÍ≤©
        ) {

            // üìä Ïò§Îäò ÏùºÏ†ï ÏöîÏïΩ (ÏÉàÎ°ú Ï∂îÍ∞Ä)
            item {
                TodaySummaryCard(
                    totalCount = uiState.totalCount,
                    completedCount = uiState.completedCount
                )
            }

            // üü° ÏßÄÍ∏à Ìï† Ïùº
            uiState.currentSchedule?.let { schedule ->
                item {
                    CurrentTaskSection(
                        schedule = schedule,
                        onShowDetail = { viewModel.showScheduleDetail(schedule.id) }
                    )
                }
            }

            // üìã Ïò§ÎäòÏùò ÏùºÏ†ï
            item {
                TodayScheduleSection(
                    schedules = uiState.todaySchedules,
                    onToggleComplete = viewModel::toggleScheduleComplete,
                    onShowDetail = viewModel::showScheduleDetail
                )
            }

            // Îπà ÏÉÅÌÉú Ï≤òÎ¶¨ (Îçî ÏπúÍ∑ºÌïòÍ≤å)
            if (uiState.todaySchedules.isEmpty() && !uiState.isLoading) {
                item {
                    EmptyStateCard()
                }
            }

            // ÏóêÎü¨ Î©îÏãúÏßÄ (Îçî Î™ÖÌôïÌïòÍ≤å)
            if (uiState.error != null) {
                item {
                    ErrorCard(error = uiState.error!!)
                }
            }
        }
    }
}

// üìä Ïò§Îäò ÏùºÏ†ï ÏöîÏïΩ Ïπ¥Îìú (ÏÉàÎ°ú Ï∂îÍ∞Ä)
@Composable
private fun TodaySummaryCard(
    totalCount: Int,
    completedCount: Int
) {
    val progress = if (totalCount > 0) completedCount.toFloat() / totalCount else 0f

    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier.padding(24.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    Icons.Default.CheckCircle,
                    contentDescription = null,
                    tint = Color(0xFF4CAF50),
                    modifier = Modifier.size(28.dp)
                )
                Spacer(modifier = Modifier.width(12.dp))
                Text(
                    text = "Ïò§ÎäòÏùò ÏßÑÌñâÏÉÅÌô©",
                    fontSize = 20.sp, // ÌÅ∞ Í∏ÄÏî®
                    fontWeight = FontWeight.Bold,
                    color = Color.Black
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            // ÏßÑÌñâÎ•† ÌëúÏãú
            Text(
                text = "${completedCount}Í∞ú ÏôÑÎ£å / Ï¥ù ${totalCount}Í∞ú",
                fontSize = 18.sp, // ÌÅ∞ Í∏ÄÏî®
                fontWeight = FontWeight.Medium,
                color = Color(0xFF424242)
            )

            Spacer(modifier = Modifier.height(12.dp))

            // ÏßÑÌñâÎ•† Î∞î
            LinearProgressIndicator(
                progress = { progress },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(8.dp), // ÎëêÍ∫ºÏö¥ ÏßÑÌñâÎ•† Î∞î
                color = Color(0xFF4CAF50),
                trackColor = Color(0xFFE0E0E0)
            )

            Spacer(modifier = Modifier.height(8.dp))

            // ÌçºÏÑºÌä∏ ÌëúÏãú
            Text(
                text = "${(progress * 100).toInt()}% ÏôÑÎ£å",
                fontSize = 16.sp,
                color = Color(0xFF4CAF50),
                fontWeight = FontWeight.Medium
            )
        }
    }
}

// üòä Îπà ÏÉÅÌÉú Ïπ¥Îìú (Í∞úÏÑ†)
@Composable
private fun EmptyStateCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFF3E5F5)),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier.padding(32.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "üìÖ",
                fontSize = 64.sp // Îçî ÌÅ∞ Ïù¥Î™®ÏßÄ
            )
            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "Ïò§Îäò Îì±Î°ùÎêú ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§",
                fontSize = 20.sp, // ÌÅ∞ Í∏ÄÏî®
                color = Color(0xFF424242),
                fontWeight = FontWeight.Medium
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "ÏïÑÎûò + Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏùºÏ†ïÏùÑ Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî",
                fontSize = 16.sp,
                color = Color(0xFF757575)
            )
        }
    }
}

// ‚ö†Ô∏è ÏóêÎü¨ Ïπ¥Îìú (Í∞úÏÑ†)
@Composable
private fun ErrorCard(error: String) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFFFEBEE)),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier.padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "‚ö†Ô∏è",
                fontSize = 48.sp
            )
            Spacer(modifier = Modifier.height(12.dp))
            Text(
                text = "Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFD32F2F)
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = error,
                fontSize = 16.sp,
                color = Color(0xFFD32F2F)
            )
        }
    }
}